<h3 id="이-글에서는-django를-사용할-가상환경을-만들고-프로젝트-및-앱-생성까지-진행한다">이 글에서는 Django를 사용할 가상환경을 만들고 프로젝트 및 앱 생성까지 진행한다.</h3>

<hr />

<p>일단 Django 개발에 사용할 파이썬 가상 환경을 만들자. 이전 글에서 virtualenvwrapper를 설치하였으므로, 같은 환경이라고 가정하겠다.</p>

<p>터미널을 띄우고 <code class="highlighter-rouge">mkvirtualenv</code> 를 이용해서 가상환경을 생성한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkvirtualenv django-blog -p python3 &lt;!--more--&gt;
</code></pre></div></div>

<p>파이썬 3 버전이 기본인 가상 환경이다. 이후 모든 <code class="highlighter-rouge">python</code> 키워드는 <code class="highlighter-rouge">python3</code>을 가리킬 것이다. 실제로 <code class="highlighter-rouge">~/.virtualenvs/django-blog/bin/</code> 경로에 가보면 <code class="highlighter-rouge">python</code> 심볼릭 링크가 <code class="highlighter-rouge">python3</code>으로 연결되어 있음을 확인할 수 있다.</p>

<p>물론 가상환경 이름과는 다르게 아직 이 환경에 설치된 파이썬 패키지를 보면 Django는 없는 것을 확인할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip list
EPRECATION: The default ....
pip (9.0.1)
setuptools (38.5.1)
wheel (0.30.0)
</code></pre></div></div>

<p>이제 Django를 다음 명령어를 날려 설치하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip install django
</code></pre></div></div>

<p>이후 <code class="highlighter-rouge">pip list</code>를 날리면 장고 패키지가 설치된 것을 확인할 수 있다.</p>

<hr />

<p>이제 장고 프로젝트를 새로 만들면 된다. 여기서 주의할 점이 있다. 파이썬 코드가 웹서버의 DocumentRoot에 위치하는 것은 권장하지 않는다(출처:<a href="https://docs.djangoproject.com/ko/2.0/intro/tutorial01/">docs.djangoproject.com</a>). 홈 폴더 등에 두면 좋을 것 같다.</p>

<p>다음 명령어로 홈 경로에서 프로젝트 뼈대를 만들자. 물론 파이썬 가상환경이 활성화된 상태여야 한다. 안 되어 있다면 <code class="highlighter-rouge">workon django-blog</code> 명령어로 활성화시킨 후 진행하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ workon django-blog
$ django-admin startproject _base
$ tree _base
_base
├── _base
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── manage.py
</code></pre></div></div>

<p><code class="highlighter-rouge">tree</code>명령어가 없다면 다음 명령으로 설치할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt install tree          # Debian / Mint / Ubuntu Linux
# yum install tree              # RHEL / CentOS / Fedora Linux
</code></pre></div></div>

<p>bash에서 $와 #의 차이는 루트 권한이냐 아니냐의 차이다. 궁금하면 지금 당장 <code class="highlighter-rouge">sudo -i</code>를 날려보자. root 유저로 쉘이 바뀌면서 $가 #으로 바뀔 것이다. 물론 뒤쪽 #은 주석처리된 것이다. 혹시 전부 복붙을 했는데 작동하지 않는다고 당황하지 말자. 주석에서 명시했듯이, 사용하는 리눅스의 계열에 따라 다른 명령어를 사용해야 한다. 자세한 내용은 <a href="https://namu.wiki/w/%EB%A6%AC%EB%88%85%EC%8A%A4#s-9">나무위키: 리눅스 베포판</a>에서 좀 더 알아볼 수 있겠다.</p>

<p>새로운 프로젝트를 생성했다면 작동하는지 확인해보자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).
March 02, 2018 - 11:36:38
Django version 2.0.2, using settings '_base.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
</code></pre></div></div>

<p>현재 원격 서버가 아닌 로컬에서 작업하고 있다면, <a href="http://localhost:8000">이 링크</a>가 작동할 것이다. 안된다면 터미널에서 서버가 실행되는지 확인하고, 웹브라우저로 터미널에서 표시되는, http로 시작하는 주소에 접속해 보자.</p>

<p>아무런 페이지를 작성하지 않았기 때문에 뭐가 뜰리 만무하다. 기본 Django 템플릿이 뜰 것이다. 다음과 같이 우주선이 출발하는 그림이 뜬다면 성공이다.</p>

<p><a href="http://res.cloudinary.com/rockheung/image/upload/v1519992906/Screenshot_from_2018-03-02_20-39-33_eoccbe.png"><img src="http://res.cloudinary.com/rockheung/image/upload/v1519992906/Screenshot_from_2018-03-02_20-39-33_eoccbe.png" alt="" /></a></p>

<p>권장되지는 않지만, 만약 로컬이 아니라 외부에서 접속할 수 있도록 하고 싶다면 다음과 같은 명령을 날리고 서버의 공인 아이피에 <code class="highlighter-rouge">8000</code>포트로 접근하면 된다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python manage.py runserver 0:8000
</code></pre></div></div>

<p><em>절대로</em> 위와 같이 개발 서버만으로 상용 사이트를 운영하지 않기를 바란다. 어떤 보안 이슈가 있을지 알 수 없다. 장고는 개발을 위한 웹 프레임워크지, 웹 서버 툴이 아니다. 후에 다루겠지만, 개발이 완료되면 베포를 위해 nginx를 uwsgi에 연동하는 형태로 진행할 것이다.</p>

<hr />

<p>지금까지 프로젝트를 (정말 간단하게) 만들었다. 이제 여기에 실제 페이지를 구현하는데 사용할 앱을 작성해야 한다. 다음과 같은 명령으로 앱을 새롭게 생성하자. 물론 당연하게도, 프로젝트 폴더 안의 <code class="highlighter-rouge">manage.py</code>를 사용해야 한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python manage.py startapp blog
$ tree blog
blog
├── admin.py
├── apps.py
├── __init__.py
├── migrations
│   └── __init__.py
├── models.py
├── tests.py
└── views.py
</code></pre></div></div>
<!DOCTYPE html>
<html lang="en">

  <head>
  <meta charset="utf-8">
  <title>SUNDRYCODES - 2. 준비 - 파이썬 가상환경</title>
  <meta name="robots" content="follow, all" >
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=0" >
  <meta name="description" content="짤막한, 아니면 기억하고 싶은 잡스런 코드나 약간의 주절거림이 있는 개인 블로그입니다.">
  <meta name="keywords" content=### 이 글에서는 Django를 사용할 가상환경을 만들고 프로젝트 및 앱 생성까지 진행한다. 

-----------------

일단 Django 개발에 사용할 파이썬 가상 환경을 만들자. 이전 글에서 virtualenvwrapper를 설치하였으므로, 같은 환경이라고 가정하겠다.

터미널을 띄우고 `mkvirtualenv` 를 이용해서 가상환경을 생성한다.

    $ mkvirtualenv django-blog -p python3
<!--more-->

파이썬 3 버전이 기본인 가상 환경이다. 이후 모든 `python` 키워드는 `python3`을 가리킬 것이다. 실제로 `~/.virtualenvs/django-blog/bin/` 경로에 가보면 `python` 심볼릭 링크가 `python3`으로 연결되어 있음을 확인할 수 있다.

물론 가상환경 이름과는 다르게 아직 이 환경에 설치된 파이썬 패키지를 보면 Django는 없는 것을 확인할 수 있다. 

    $ pip list
    EPRECATION: The default ....
    pip (9.0.1)
    setuptools (38.5.1)
    wheel (0.30.0)

이제 Django를 다음 명령어를 날려 설치하자.

    $ pip install django

이후 `pip list`를 날리면 장고 패키지가 설치된 것을 확인할 수 있다.

------------------

이제 장고 프로젝트를 새로 만들면 된다. 여기서 주의할 점이 있다. 파이썬 코드가 웹서버의 DocumentRoot에 위치하는 것은 권장하지 않는다(출처:[docs.djangoproject.com](https://docs.djangoproject.com/ko/2.0/intro/tutorial01/)). 홈 폴더 등에 두면 좋을 것 같다. 

다음 명령어로 홈 경로에서 프로젝트 뼈대를 만들자. 물론 파이썬 가상환경이 활성화된 상태여야 한다. 안 되어 있다면 `workon django-blog` 명령어로 활성화시킨 후 진행하자.

    $ workon django-blog
    $ django-admin startproject _base
    $ tree _base
    _base
    ├── _base
    │   ├── __init__.py
    │   ├── settings.py
    │   ├── urls.py
    │   └── wsgi.py
    ├── manage.py

`tree`명령어가 없다면 다음 명령으로 설치할 수 있다. 

    $ sudo apt install tree          # Debian / Mint / Ubuntu Linux
    # yum install tree              # RHEL / CentOS / Fedora Linux

bash에서 $와 #의 차이는 루트 권한이냐 아니냐의 차이다. 궁금하면 지금 당장 `sudo -i`를 날려보자. root 유저로 쉘이 바뀌면서 $가 #으로 바뀔 것이다. 물론 뒤쪽 #은 주석처리된 것이다. 혹시 전부 복붙을 했는데 작동하지 않는다고 당황하지 말자. 주석에서 명시했듯이, 사용하는 리눅스의 계열에 따라 다른 명령어를 사용해야 한다. 자세한 내용은 [나무위키: 리눅스 베포판](https://namu.wiki/w/%EB%A6%AC%EB%88%85%EC%8A%A4#s-9)에서 좀 더 알아볼 수 있겠다.

새로운 프로젝트를 생성했다면 작동하는지 확인해보자. 

    $ python manage.py runserver
    Performing system checks...
    
    System check identified no issues (0 silenced).
    March 02, 2018 - 11:36:38
    Django version 2.0.2, using settings '_base.settings'
    Starting development server at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

현재 원격 서버가 아닌 로컬에서 작업하고 있다면, [이 링크](http://localhost:8000)가 작동할 것이다. 안된다면 터미널에서 서버가 실행되는지 확인하고, 웹브라우저로 터미널에서 표시되는, http로 시작하는 주소에 접속해 보자.

아무런 페이지를 작성하지 않았기 때문에 뭐가 뜰리 만무하다. 기본 Django 템플릿이 뜰 것이다. 다음과 같이 우주선이 출발하는 그림이 뜬다면 성공이다.

[![](http://res.cloudinary.com/rockheung/image/upload/v1519992906/Screenshot_from_2018-03-02_20-39-33_eoccbe.png)](http://res.cloudinary.com/rockheung/image/upload/v1519992906/Screenshot_from_2018-03-02_20-39-33_eoccbe.png)

권장되지는 않지만, 만약 로컬이 아니라 외부에서 접속할 수 있도록 하고 싶다면 다음과 같은 명령을 날리고 서버의 공인 아이피에 `8000`포트로 접근하면 된다. 

    $ python manage.py runserver 0:8000

*절대로* 위와 같이 개발 서버만으로 상용 사이트를 운영하지 않기를 바란다. 어떤 보안 이슈가 있을지 알 수 없다. 장고는 개발을 위한 웹 프레임워크지, 웹 서버 툴이 아니다. 후에 다루겠지만, 개발이 완료되면 베포를 위해 nginx를 uwsgi에 연동하는 형태로 진행할 것이다.

--------------------------------------------------

지금까지 프로젝트를 (정말 간단하게) 만들었다. 이제 여기에 실제 페이지를 구현하는데 사용할 앱을 작성해야 한다. 다음과 같은 명령으로 앱을 새롭게 생성하자. 물론 당연하게도, 프로젝트 폴더 안의 `manage.py`를 사용해야 한다.

    $ python manage.py startapp blog
    $ tree blog
    blog
    ├── admin.py
    ├── apps.py
    ├── __init__.py
    ├── migrations
    │   └── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py
<h3 id="이-글에서는-vps에서-파이썬-가상환경을-만드는-virtualenvwrapper-를-설치하여-django를-실행시킬-가상환경을-구성하기-위한-준비를-한다-virtualenv를-사용할-때와는-다르게-virtualenvwrapper는-현재의-path에-상관없이-workon-가상환경-이름으로-해당-가상환경을-활성화할-수-있다-마치-폴더를-만드는-것-처럼-쉽게-가상환경을-만들고-지울-수-있다">이 글에서는 VPS에서 파이썬 가상환경을 만드는 <code class="highlighter-rouge">virtualenvwrapper</code> 를 설치하여 Django를 실행시킬 가상환경을 구성하기 위한 준비를 한다. <code class="highlighter-rouge">virtualenv</code>를 사용할 때와는 다르게 <code class="highlighter-rouge">virtualenvwrapper</code>는 현재의 path에 상관없이 <code class="highlighter-rouge">workon $(가상환경 이름)</code>으로 해당 가상환경을 활성화할 수 있다. 마치 폴더를 만드는 것 처럼 쉽게 가상환경을 만들고, 지울 수 있다.</h3>

<!--more-->

<p>파이썬을 사용하다가 필연적으로 맞닥뜨리는 명령어가 바로 “<a href="https://ko.wikipedia.org/wiki/Pip_(%ED%8C%A8%ED%82%A4%EC%A7%80_%EA%B4%80%EB%A6%AC%EC%9E%90)">pip</a>“이다. 대개 다음과 같이 쓴다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install $(파이썬 패키지 이름 in PyPI)
</code></pre></div></div>

<p><em><a href="https://pypi.python.org/pypi">PyPI</a></em></p>

<p>파이썬 2.7.9 이후 버전과 3.4 이후 버전은 기본적으로 포함하고 있다고 하나, 가급적이면 최신 pip 패키지를 이용하는 편이 좋다. 최신 버전이 아닐 경우, pip을 실행 시에 업그레이드를 권하는 멘트가 뜬다. <a href="https://bootstrap.pypa.io/get-pip.py">여기 get-pip.py</a>를 눌러 가장 최신 버전의 pip을 설치하는 파이썬 스크립트를 다운 받을 수 있다. 본인은 이 방식을 선호하나,  다른 방식을 찾는다면 <a href="https://pip.pypa.io/en/stable/installing/#">여기</a>에서 공식 문서를 참조할 수 있다.</p>

<p>Root 권한으로 다음을 실행시키면 최신 버전의 pip을 설치할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># python get-pip.py
</code></pre></div></div>

<p>조금 주의할 부분이 있다면, Ubuntu의 기본 설정은 python : python 2 버전이라는 것이다. 그러니까 위와 같은 커맨드를 날리면 이후 pip으로 설치하는 모든 패키지는 오직 파이썬 2에 해당하는 패키지가 설치될 것이다. 그렇다고 다음과 같이 실행시킨다면</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># python3 get-pip.py
</code></pre></div></div>

<p>이후 모든 <code class="highlighter-rouge">pip install $(패키지명)</code> 은 python 3을 위한 패키지만을 설치할 것이다. 자신의 현재 pip 이 어느 버전대의 파이썬 패키지를 설치하고 있는지 알고 싶다면,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip -V
pip 9.0.1 from /usr/local/lib/python2.7/dist-packages (python 2.7)
</code></pre></div></div>

<p>터미널에서 위와 같은 옵션으로 확인할 수 있다. <code class="highlighter-rouge">pip --help</code> 커맨드로 다양한 다른 옵션을 확인할 수 있다.
한가지 팁이 있다면, 파이썬 2용 패키지를 설치하는 pip2 와 같은 커맨드도 있다. 이 커맨드는 파이썬 2 용 패키지를 설치하도록 강제한다.</p>

<p>###파이썬 2가 파이썬 3의 하위호환이라고 생각하면 절대 안 된다.</p>

<p>비슷하나 서로 독립된 다른 언어라고 생각하는 편이 좋을 것이다. pip으로 2버전대의 패키지를 설치했다고 파이썬 3에서 사용할 수 있는 것은 아니다. 실제로 설치되는 위치가 분리되어 있다. 다음 커맨드로 설치된 파이썬 패키지를 확인할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip list
</code></pre></div></div>

<p>정리하면, 만약 다음과 같이 차례로 입력했다고 하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip -V
pip 9.0.1 from /usr/local/lib/python3.5/dist-packages (python 3.5)
$
$
$ pip list
boto (2.38.0)
chardet (2.3.0)
cryptography (1.2.3)
duplicity (0.7.6)
enum34 (1.1.2)
idna (2.0)
ipaddress (1.0.16)
lockfile (0.12.2)
ndg-httpsclient (0.4.0)
pbr (3.1.1)
pip (9.0.1)
...
stevedore (1.28.0)
urllib3 (1.13.1)
wheel (0.30.0)
</code></pre></div></div>

<p>현재 pip 으로 파이썬 3 용 패키지를 설치할 수 있으며, 파이썬 3용 패키지 중 설치된 목록을 확인한 것이다. 이 상황에서 파이썬 2 용으로 설치된 패키지를 확인하고 싶으면 다음과 같이 입력하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip2 list
</code></pre></div></div>

<p>이 모든 골때리는 상황을 위와 같은 설명 없이 겪게 된다면, 분명히 설치했는데 import가 되지 않는 상황을 맞닥뜨리게 된다. 이 모든 것의 이유는 바로 아까도 언급했듯이, 파이썬 3가 파이썬 2와 호환되지 않기 때문이다.</p>

<p>그리고 이런 상황을 좀 더 깔끔하고 명확하게 다루기 위해 등장한 것이 파이썬 가상환경이다.</p>

<p>몇 가지 방법(<a href="https://virtualenv.pypa.io/en/stable/">virtualenv</a>, <a href="https://github.com/pyenv/pyenv">pyenv</a>, etc)이 있는 것으로 알지만 본인은 <a href="http://virtualenvwrapper.readthedocs.io/en/stable/">virtualenvwrapper</a>를 사용하는 것을 선호한다. virtualenv 의 상위호한 격으로 생각하면 된다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># pip install virtualenvwrapper
</code></pre></div></div>

<p>설치를 하고, 홈 폴더의 Shell startup 파일을 수정하는 과정이 필요하다. 일반적으로 <em>.bashrc</em>나 <em>.profile</em>를 수정한다. 파일의 맨 마지막에 다음 내용을 추가한다. 편집기는 편할 대로 사용한다. 터미널에서 파일을 수정할 때는 대개 <code class="highlighter-rouge">vi</code>나 <code class="highlighter-rouge">nano</code>를 사용한다. 편집을 할 수만 있으면 어느 편집기를 사용하든 상관없다. 기본 가정이 ssh로 VPS에 접속하는 것이라서 터미널에서 수정하는 경우를 예로 들었다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
</code></pre></div></div>

<p>만약 편집기를 사용하는 데에 약간의 어려움이 있거나 귀찮다면 다음과 같이 터미널에서 해결하는 방법도 있다. 수정하고자 하는 파일(.bashrc)의 제일 마지막에 위의 내용을 추가하는 명령어이다. <code class="highlighter-rouge">echo '</code>까지만 입력하고 엔터를 누르면 쉘 프롬포트가 $ 에서 &gt; 로 바뀌는데, 이때 위의 내용을 복붙하고 <code class="highlighter-rouge">' &gt;&gt; ~/.bashrc</code>를 입력하면 된다. 아마도 다음과 같이 보일 것이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo '
&gt; export WORKON_HOME=$HOME/.virtualenvs
&gt; export PROJECT_HOME=$HOME/Devel
&gt; source /usr/local/bin/virtualenvwrapper.sh' &gt;&gt; ~/.bashrc
</code></pre></div></div>

<p>잘 추가되었는지 확인하려면 다음 명령어를 날려주자</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat ~/.bashrc
</code></pre></div></div>

<p>출력되는 내용이 방대할 텐데, 그렇다면 마지막 10줄만 확인하는 다음의 명령어도 괜찮다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ tail ~/.bashrc
</code></pre></div></div>

<p>제대로 잘 입력이 되었다 생각되면, 다음 명령어로 적용시키자</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ . ~/.bashrc
</code></pre></div></div>

<p>다음의 명령어와 같은 의미다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ source ~/.bashrc
</code></pre></div></div>

<p>이 둘의 차이가 궁금하다면 <a href="https://askubuntu.com/questions/25488/what-is-the-difference-between-source-and">여기</a>에서 해답을 얻을 수 있을 것이다.</p>

<p>어쨌든, 위의 과정까지 따라왔다면, 이제 한 줄만 남았다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkvirtualenv $(가상환경을 지칭할 이름: ex) myenv)
New python executable in /home/rockheung/.virtualenvs/text/bin/python
Installing setuptools, pip, wheel...done.
virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/predeactivate
virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/postdeactivate
virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/preactivate
virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/postactivate
virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/get_env_details
(myenv) $
(myenv) $
</code></pre></div></div>

<p>위와 같이 방금 이름붙인 myenv가 shell에 보이면 성공이다.</p>

<p>빠져나가고 싶으면 다음을 입력하자</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ deactivate
</code></pre></div></div>

<p>만약 이 가상환경을 지우고 싶으면 위의 출력 내용에도 보이듯이 <em>$HOME/.virtualenvs</em>폴더에 있는 해당 이름의 폴더를 지우면 된다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rm -rf ~/.virtualenvs/myenv
</code></pre></div></div>

<p>물론 직관적이게도 <code class="highlighter-rouge">rmvirtualenv</code>를 사용하는 것을 권장한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rmvirtualenv myenv
</code></pre></div></div>

<p>가상환경에서 특정 파이썬 버전을 지칭하고 싶다면 <code class="highlighter-rouge">-p</code> 매개변수를 붙여 다음과 같이 입력하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkvirtualenv myenv3 -p python3
</code></pre></div></div>

<p>해당 가상환경이 활성화된 상태에서는 python3 버전이 기본 python이 된다.</p>
