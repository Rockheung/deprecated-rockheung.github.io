---
layout: post
title:  "3. Django 시작하기"
date:   2018-03-02 11:08:44.792 +0900
categories: [ django ]
tags: [ Python, virtualenv, virtualenvwrapper, 파이썬, 장고, Django ]
---

### 이 글에서는 Django를 사용할 가상환경을 만들고 프로젝트 및 앱 생성까지 진행한다. 

-----------------

일단 Django 개발에 사용할 파이썬 가상 환경을 만들자. 이전 글에서 virtualenvwrapper를 설치하였으므로, 같은 환경이라고 가정하겠다.

터미널을 띄우고 `mkvirtualenv` 를 이용해서 가상환경을 생성한다.

    $ mkvirtualenv django-blog -p python3
<!--more-->

파이썬 3 버전이 기본인 가상 환경이다. 이후 모든 `python` 키워드는 `python3`을 가리킬 것이다. 실제로 `~/.virtualenvs/django-blog/bin/` 경로에 가보면 `python` 심볼릭 링크가 `python3`으로 연결되어 있음을 확인할 수 있다.

물론 가상환경 이름과는 다르게 아직 이 환경에 설치된 파이썬 패키지를 보면 Django는 없는 것을 확인할 수 있다. 

    $ pip list
    EPRECATION: The default ....
    pip (9.0.1)
    setuptools (38.5.1)
    wheel (0.30.0)

이제 Django를 다음 명령어를 날려 설치하자.

    $ pip install django

이후 `pip list`를 날리면 장고 패키지가 설치된 것을 확인할 수 있다.

------------------

이제 장고 프로젝트를 새로 만들면 된다. 여기서 주의할 점이 있다. 파이썬 코드가 웹서버의 DocumentRoot에 위치하는 것은 권장하지 않는다(출처:[docs.djangoproject.com](https://docs.djangoproject.com/ko/2.0/intro/tutorial01/)). 홈 폴더 등에 두면 좋을 것 같다. 

다음 명령어로 홈 경로에서 프로젝트 뼈대를 만들자. 물론 파이썬 가상환경이 활성화된 상태여야 한다. 안 되어 있다면 `workon django-blog` 명령어로 활성화시킨 후 진행하자.

    $ workon django-blog
    $ django-admin startproject _base
    $ tree _base
    _base
    ├── _base
    │   ├── __init__.py
    │   ├── settings.py
    │   ├── urls.py
    │   └── wsgi.py
    ├── manage.py

`tree`명령어가 없다면 다음 명령으로 설치할 수 있다. 

    $ sudo apt install tree          # Debian / Mint / Ubuntu Linux
    # yum install tree              # RHEL / CentOS / Fedora Linux

bash에서 $와 #의 차이는 루트 권한이냐 아니냐의 차이다. 궁금하면 지금 당장 `sudo -i`를 날려보자. root 유저로 쉘이 바뀌면서 $가 #으로 바뀔 것이다. 물론 뒤쪽 #은 주석처리된 것이다. 혹시 전부 복붙을 했는데 작동하지 않는다고 당황하지 말자. 주석에서 명시했듯이, 사용하는 리눅스의 계열에 따라 다른 명령어를 사용해야 한다. 자세한 내용은 [나무위키: 리눅스 베포판](https://namu.wiki/w/%EB%A6%AC%EB%88%85%EC%8A%A4#s-9)에서 좀 더 알아볼 수 있겠다.

새로운 프로젝트를 생성했다면 작동하는지 확인해보자. 

    $ python manage.py runserver
    Performing system checks...
    
    System check identified no issues (0 silenced).
    March 02, 2018 - 11:36:38
    Django version 2.0.2, using settings '_base.settings'
    Starting development server at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

현재 원격 서버가 아닌 로컬에서 작업하고 있다면, [이 링크](http://localhost:8000)가 작동할 것이다. 안된다면 터미널에서 서버가 실행되는지 확인하고, 웹브라우저로 터미널에서 표시되는, http로 시작하는 주소에 접속해 보자.

아무런 페이지를 작성하지 않았기 때문에 뭐가 뜰리 만무하다. 기본 Django 템플릿이 뜰 것이다. 다음과 같이 우주선이 출발하는 그림이 뜬다면 성공이다.

[![](http://res.cloudinary.com/rockheung/image/upload/v1519992906/Screenshot_from_2018-03-02_20-39-33_eoccbe.png)](http://res.cloudinary.com/rockheung/image/upload/v1519992906/Screenshot_from_2018-03-02_20-39-33_eoccbe.png)

권장되지는 않지만, 만약 로컬이 아니라 외부에서 접속할 수 있도록 하고 싶다면 다음과 같은 명령을 날리고 서버의 공인 아이피에 `8000`포트로 접근하면 된다. 

    $ python manage.py runserver 0:8000

*절대로* 위와 같이 개발 서버만으로 상용 사이트를 운영하지 않기를 바란다. 어떤 보안 이슈가 있을지 알 수 없다. 장고는 개발을 위한 웹 프레임워크지, 웹 서버 툴이 아니다. 후에 다루겠지만, 개발이 완료되면 베포를 위해 nginx를 uwsgi에 연동하는 형태로 진행할 것이다.

--------------------------------------------------

지금까지 프로젝트를 (정말 간단하게) 만들었다. 이제 여기에 실제 페이지를 구현하는데 사용할 앱을 작성해야 한다. 다음과 같은 명령으로 앱을 새롭게 생성하자. 물론 당연하게도, 프로젝트 폴더 안의 `manage.py`를 사용해야 한다.

    $ python manage.py startapp blog
    $ tree blog
    blog
    ├── admin.py
    ├── apps.py
    ├── __init__.py
    ├── migrations
    │   └── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py
