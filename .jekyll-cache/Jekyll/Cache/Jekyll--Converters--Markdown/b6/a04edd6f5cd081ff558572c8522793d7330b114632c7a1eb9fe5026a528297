I"Z<hr />
<p>layout: post
title: ‘비동기: 이벤트 루프?’
date: 2019-03-05 00:00:00.123 +0900
author: Rockheung
tags: codestates javascript bootcamp
categories: Study
—비동기를 이해해 보려 한다.</p>

<p>통상적인 언어에서는 대개 코드가 실행되는 어떤 레이어가 있다고 하면, 각 라인이 차례로 실행되어 해당 함수가 끝나기 전에는 다음 라인이 실행되지 않는다. 주로 블락킹(blocking)되어 있다고 표현한다.</p>

<p>이런 종류의 코드에 익숙해져 있는 상태에서 자바스크립트로 코드를 다루다 보면, HTTP 요청이나 setTimeout()과 같은 코드를 작성할 때 작은 혼란이 오게 된다.</p>

<p>클라이언트에서 서버에 요청을 보내고, 그걸 받아 뭔가를 하려 한다고 가정해 보자. 뭔가 어떤 함수를 실행하면 그 리턴값으로 서버의 응답을 돌려줄 것만 같다. 그러나 그런 방식이라면 컴퓨터의 자원은 결코 최대치로 작동하지 않을 것이다. 게임 할 때 으레 신경쓰게 되는 핑, 지연 시간 때문이다.컴퓨터는 요청을 보낸 후 응답을 받을 때까지 아무 것도 할 수 없게 된다.</p>

<p>자바스크립트는 단일 스레드 언어이기 때문에 새 스레드를 열거나 할 수 없다. 좀 더 엄밀히 말하자면 자바스크립트 엔진의 콜스택은 하나이기 때문에 스레드 분기 같은 걸 생각할 수가 없다. 그래서 사용하게 되는 것이 이벤트 루프이다.</p>

<p>요청을 보내고 그것을 받아 처리하는 “콜백”을 만들어 이벤트 루프의 큐에 던지면, 이벤트 루프에서 그걸 FIFO로 하나씩 뽑아 콜스택에 담아 처리하게 된다. 항상 콜스택이 먼저 비워지고, 이후 이벤트 루프를 비우게 되기 때문에 다음 코드에서 절대로 <code class="language-plaintext highlighter-rouge">baz</code>가 먼저 콘솔에 출력되지 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">delay</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">delay</span><span class="p">();</span>
  <span class="nx">bar</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo!</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// (3)</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">delay</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bar!</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// (2)</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">baz</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">baz!</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// (4)</span>
<span class="p">}</span>

<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">baz</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// (1)</span>
<span class="nx">foo</span><span class="p">();</span>
</code></pre></div></div>

<blockquote>
  <p>출처: <a href="https://meetup.toast.com/posts/89"># 자바스크립트와 이벤트 루프</a></p>
</blockquote>

<p>그렇다면 에러 처리는 어떻게 될까?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.btn</span><span class="dl">'</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// (A)</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/members</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// (B)</span>
      <span class="c1">// 에러 발생 코드</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error : </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<blockquote>
  <p>출처: <a href="https://meetup.toast.com/posts/89"># 자바스크립트와 이벤트 루프</a></p>
</blockquote>

<p>위 코드는 에러를 잡아내지 못한다. Ajax 요청은 먼저 이벤트 루프에 담겨있다가 콜스택이 모두 비워지면 다시 이벤트 루프에서 뽑아져 콜스택에 들어가 실행되게 된다. 서버로의 요청에 대한 에러 핸들링이 아니라 <em>서버로의 요청을 하는 콜백을 이벤트 루프에 담는 것에 대한 에러 핸들링</em>이 되기 때문에 의도했던 대로 try-catch 구문은 작동하지 않게 된다. 요청에 대한 에러 핸들링을 위해서는 try-catch 구문을 getJSON()의 콜백 함수에 담아야 생각대로 동작하게 될 것이다.</p>

<blockquote>
  <p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p>
</blockquote>
:ET