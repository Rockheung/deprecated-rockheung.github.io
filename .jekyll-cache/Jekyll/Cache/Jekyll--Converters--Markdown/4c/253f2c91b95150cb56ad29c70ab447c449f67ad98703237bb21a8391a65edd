I"9<p><em>안녕하세요, 매일프로그래밍 이번주 문제입니다.</em></p>

<p><em>간격(interval)로 이루어진 배열이 주어지면, 겹치는 간격 원소들을 합친 새로운 배열을 만드시오. 간격은 시작과 끝으로 이루어져 있으며 시작은 끝보다 작거나 같습니다.</em></p>

<p><em>Given a list of intervals, merge intersecting intervals.</em></p>

<!--more-->

<p><em>예제)</em></p>

<p><em>Input: [[2,4], [1,5], [7,9]]</em></p>

<p><em>Output: [[1,5], [7,9]]</em></p>

<p><em>Input: [[3,6], [1,3], [2,4]]</em></p>

<p><em>Output: [[1,6]]</em></p>

<p><em>풀이를 보고 싶으시다면 <a href="http://url6080.mailprogramming.com/wf/click?upn=5YNwhcR4-2FFhQA54IFFE-2FIijGnZEwyyYieIxIap6l3O-2FubN19fiIJSHHldST5hRdPve0FiwaKLwgjdueIqs2AudeqqijB2P7Tmj5RCqXyXqdOO9tCqdjxX-2FQFY0NN1OBApbekhSSuFmcUF-2BNW9SBGIklOYzOCuFV1TcM7m-2FP0s6R4-2BurlgC6SGFxVKT3kq-2FMP_Zgoc2ijnN3jtNTS7ITLZKrJdLqoKRo6qqLK1adFq7tfpr38XOwkbKCkAq6jc6J9893wuN437PImWjxoLznjg6VJzwVeK3ArtZbu95oSlmxLo-2Fyz7C1HBtyi9VRRg6dAPq79xWck8RwHp0-2FCFF57KyPQnqbulzQNnqs2tvg4PAUuU5LsIPN5V9p6WCU7-2B6J7SvY-2B-2F-2FfJ1igoHPJ5W4RP-2FwK-2BIW0yWAfGuCCbLKN-2BYksDeFL1nb0NOFV8q1iDVmI3Z">풀이보기</a>를 눌러주세요.</em></p>

<p>무슨… 말인가?</p>

<p>[1,2,3,4,5,6,7,8,9]에서 첫 번째 예시를 보자</p>

<p>[1,<strong><em>2</em></strong>,<strong><em>3</em></strong>,<strong><em>4</em></strong>,5,6,7,8,9]</p>

<p>[<strong><em>1</em></strong>,<strong><em>2</em></strong>,<strong><em>3</em></strong>,<strong><em>4</em></strong>,<strong><em>5</em></strong>,6,7,8,9]</p>

<p>[1,2,3,4,5,6,<strong><em>7</em></strong>,<strong><em>8</em></strong>,<strong><em>9</em></strong>]</p>

<p>영문 문제에도 있듯, merge 하라는 말인 것 같다. git에서 merge를 한두번 써본 사람이라면 대충 개념을 알 것이다. 고등학교 수학으로 치면 <strong>합집합 구해라</strong> 정도로 이해하면 될 것 같다. 다만 다른 점은 순서가 있다는 점이다.</p>

<p>중괄호가 어색하니 파이썬 기준으로 다음과 같은 형태의 배열이 입출력된다고 하자.</p>

<p>[(2,4), (1,5), (7,9)] =&gt; [(1,5), (7,9)]</p>

<p>일단 두 원소를 합치는 함수를 짜보았다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">unit_merge</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
<span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
<span class="k">return</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">]</span>
<span class="k">else</span><span class="p">:</span>
<span class="k">return</span> <span class="p">[(</span><span class="nb">min</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
<span class="nb">max</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]))]</span></code></pre></figure>

<p>이 unit_merge 함수를 이용해서 주어진 배열을 하나씩 합치려고 했지만, 앞의 원소가 합쳐지지 않은 경우 unit_merge의 호출 횟수가 기하급수적으로 늘어났다. 예를 들어 앞에서 합치지 못해서 [(a,b),(b+2,c)]인 경우, 다음 원소가 (b+1,b+2) 이면 이를 각각의 원소를 1:1로 합친 결과는 [(a,b+2),(b+1,c)] 가 되는데, 이 결과값은 기준을 만족하는 결과가 아니기 때문에 다시 unit_merge를 호출해야 한다.</p>

<p>이 방법보다는 전체 리스트에서 가장 작은 숫자와 가장 큰 숫자의 범위를 찾아내 그 리스트 중에서 각 원소의 범위에 해당하는 숫자들을 찾아 그 범위를 정리하는 방법을 생각해 봤다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">intervals</span><span class="p">):</span>
<span class="n">i0</span><span class="p">,</span> <span class="n">i1</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">intervals</span><span class="p">:</span>
<span class="n">i0</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">i1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">go</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i0</span><span class="p">)</span>
<span class="n">end</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">i1</span><span class="p">)</span>

    <span class="n">l</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">go</span><span class="p">,</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
    <span class="n">bl</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
        <span class="n">bl</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">intervals</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">j</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">bl</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">bl</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">bl</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">i0</span><span class="p">,</span> <span class="n">i1</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">bl</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">bl</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">bl</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">b</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">bl</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">i0</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">b</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">bl</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">i1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">merged_internals</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">i0</span><span class="p">):</span>
        <span class="n">merged_internals</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">j</span><span class="p">,</span><span class="n">i1</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>

    <span class="k">return</span> <span class="n">merged_internals</span></code></pre></figure>

<p>… 정말 더러운 코드가 탄생했다. 논리적으로 무조건 작동하는 코드지만, 시간복잡도는 O(n*log(n)) 정도 되지 않을까 한다. 잘 모르겠다. 각 인터벌 원소의 값에 따라 한 부분이 크게 바뀌어서 말이다. O(n^2)보다는 분명 작다.</p>

<p>공간복잡도틑 O(n) 이지 않을까 싶다.</p>

<p>이제 풀이를 보자.</p>

<p>풀이에서는 문제의 어려운 점을 원소가 무작위적으로 배치되어 있는 부분이라 보았다. 이런 경우 자료구조를 통해 무작위의 원소를 정리하거나, 원소들을 정렬(sort)하면 된다고 한다.</p>

<p>먼저 주어진 배열의 시작값을 기준으로 정렬한 후, 하나씩 차례대로 현재 원소의 종료 값과 다음 원소의 시작 값을 비교하여 합치면 된다… 고 한다. 하라는 대로 해보자. labmda와 sorted() 메서드를 이용해 시작값 기준으로 정렬한 후, 종료값과 다음 시작값을 비교해서 합칠지 구분할지를 판별하는 코드다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">sol</span><span class="p">(</span><span class="n">intervals</span><span class="p">):</span>

    <span class="n">sorted_intervals</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">intervals</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">interval</span> <span class="p">:</span> <span class="n">interval</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">merged_intervals</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">sorted_i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">sorted_intervals</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">merged_intervals</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sorted_i</span><span class="p">)</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">merged_intervals</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">sorted_i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">merged_intervals</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sorted_i</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">merged_intervals</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">merged_intervals</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">sorted_i</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">merged_intervals</span></code></pre></figure>

<p>훨씬 간단해졌다.</p>
:ET