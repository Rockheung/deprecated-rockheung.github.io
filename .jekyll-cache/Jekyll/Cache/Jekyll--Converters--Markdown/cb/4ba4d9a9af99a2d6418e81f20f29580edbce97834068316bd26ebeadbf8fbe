I"l<p>Source: <a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0">7.7 Git 도구 - Reset 명확히 알고 가기</a>
원 글의 제목은 <em>명확히 알고 가기</em> 이나 내용이 너무 중구난방으로 널뛰어서 가볍게 정리해봤다.</p>

<!--more-->

<p>###특정 커밋의 상태로 완전히 복원하면서 그동안의 커밋 히스토리도 유지하고 싶지 않을 경우.
정말 단순하고 원초적일 경우다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git reset $(특정 커밋) --hard
</code></pre></div></div>

<p>그냥 바로 이전 커밋은 <code class="language-plaintext highlighter-rouge">HEAD~</code> 또는 <code class="language-plaintext highlighter-rouge">HEAD^</code>로 지칭할 수 있다. <code class="language-plaintext highlighter-rouge">~</code>, <code class="language-plaintext highlighter-rouge">^</code>의 갯수가 얼마나 이전 커밋을 가리킬지 나타낸다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git reset HEAD^ --hard
</code></pre></div></div>

<p>해당 커밋의 상태로 깔끔하게 Rollback 된다. HEAD가 해당 커밋으로 바뀌며 작업중인 폴더(working directory)의 내용도 완벽하게 바뀐다. 만약 추가된 파일이 있다면 unstage 상태로 유지되는 것 같다(이 부분은 확실하지 않다).
이 상태에서 그냥 <code class="language-plaintext highlighter-rouge">git push $(remote) $(branch)</code> ex) <code class="language-plaintext highlighter-rouge">git push origin master</code>를 때리면 현재 github.com의 커밋에 비해 작업중인 폴더가 이전 커밋이므로 push가 되지 않는다(친절하게 몇 개의 커밋 뒤에 있는지도 나타내준다). 강제하는 옵션인 <code class="language-plaintext highlighter-rouge">-f</code>를 추가한다</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git push -f $(remote) $(branch)
</code></pre></div></div>

<p>github.com의 커밋 히스토리도 해당 특정 커밋이 가장 최신인 때로 돌아간다.</p>

<p>###특정 파일만 되돌리고 싶은 경우.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git reset $(특정 커밋) $(file name)
</code></pre></div></div>

<p>해당 파일은 아직 이전으로 바뀌기 전이나, <code class="language-plaintext highlighter-rouge">git status</code>를 날려 보면 unstaging임을 알 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout $(file name)
</code></pre></div></div>

<p>으로 그 커밋일 때의 상태로 되돌린다. <code class="language-plaintext highlighter-rouge">git push $(remote) $(bransh)</code>를 날려준다. 그 이전에 <code class="language-plaintext highlighter-rouge">git add .</code> 등을 할 필요는 없는데, <code class="language-plaintext highlighter-rouge">git status</code>를 날려 보면 알겠지만 이미 이전의 상태로 staging임을 확인할 수 있을 것이다.</p>

<p><code class="language-plaintext highlighter-rouge">git commit -m '$(whatever U want to say)'</code> 이후 push 전에 다음 커밋과 합치고 싶으면, <code class="language-plaintext highlighter-rouge">git commit --amend -m '$(want to override message)'</code>를 한다. 커밋 메세지가 오버라이딩 된다. 이후 push하면 그 동안의 커밋이 합쳐진다.</p>
:ET