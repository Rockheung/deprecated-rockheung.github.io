I"e<h3 id="이제-뭐가-남았을까">이제 뭐가 남았을까?</h3>

<p>분명히 뭔가 남았다. 우리가 인터넷에서 보는 사이트는 이렇게 단조로운 흑백의 모노톤이 아니었다. 장고에서 사용하는 uwsgi 서버가 작성해주는 html파일 이외에도 blog앱은 갖가지 태그의 서식을 정의하고, 글자의 크기와 줄넘김 등 수많은 속성을 부여할 css 파일이 필요하다. 사진과 필요하면 폰트 파일도 여기에 포함될 것이다. 이들을 장고에서는 정적 파일이라 부르는데, 일반적으로 <code class="language-plaintext highlighter-rouge">blog/static/blog</code>의 폴더에 집어넣는다. 이들 파일은 템플릿 폴더의 index.html 파일 등에서 맨 위에 <code class="language-plaintext highlighter-rouge">{% load static %}</code>를 적어주면 로드된다. 해보자.</p>

<p>다음의 아주 간단한, <code class="language-plaintext highlighter-rouge">li</code> 태그 하위의 <code class="language-plaintext highlighter-rouge">a</code>태그에 녹색을 지정해 주는 <code class="language-plaintext highlighter-rouge">style.css</code>를 작성해 <code class="language-plaintext highlighter-rouge">blog/static/blog</code>에 추가하자.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
<span class="nl">color</span><span class="p">:</span> <span class="no">green</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>그리고 앞서 말한 대로 index.html 파일을 다음과 같이 수정한다.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">{% load static %}

<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"{% static blog/style.css %}"</span> <span class="nt">/&gt;</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">link</code>태그의 <code class="language-plaintext highlighter-rouge">{% static %}</code> 는 정적 파일의 절대 경로를 생성해 준다.</p>

<p>사진을 추가하고 싶은가? 간단하다. 이미지 파일을 <code class="language-plaintext highlighter-rouge">blog/static/blog/images</code>에 추가한 후 앞서 작성했던 <code class="language-plaintext highlighter-rouge">style.css</code>에 <code class="language-plaintext highlighter-rouge">body</code>태그의 배경을 정의하는 내용을 작성하자.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">body</span> <span class="p">{</span>
<span class="nl">background</span><span class="p">:</span> <span class="no">white</span> <span class="sx">url("images/background.gif")</span> <span class="nb">no-repeat</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>css에서 background 속성의 syntax는 <code class="language-plaintext highlighter-rouge">background: bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;</code>이다. 그러니까 순서대로 <em>흰색 바탕에 <code class="language-plaintext highlighter-rouge">background.gif</code>파일을
배경 이미지로 깔되 반복하진 말아</em> 라는 뜻이다. 혹시 다른 옵션이 궁금하면, html에 대한 모든 내용이 <a href="https://www.w3schools.com/">w3schools.com</a>에 있다. 여기서부터는 장고의 범주를 넘어서는 내용이다. html과 css, 이미지 파일 등을 어떻게 작성하여 사이트에 집어넣는지에 대한 내용이기 때문이다. 여기서 더 얘기하는 것 보다 직접 인터넷에서 찾아보는 편이 빠를 것이다.</p>

<p>웹페이지에서 css와 html 부분은 사실 거의 오픈소스라고 해도 무방하다. 어느 사이트든 크롬의 관리자 도구<code class="language-plaintext highlighter-rouge">F12</code>를 이용하면 웹페이지 렌더링에 사용된 코드를 볼 수 있기 때문이다. 사실 본인의 블로그도 그런 식으로 몇 가지 예시를 뒤적뒤적하면서 장고의 템플릿에 css를 적용시킨 것이다. 맘에 드는 디자인의 사이트에서 코드를 들여다보기 시작하면, 전혀 어렵지 않을 것이다. 친절하게도 각 태그의 위치와 속성이 하이라이트 되니 지금 당장 이 페이지부터 <code class="language-plaintext highlighter-rouge">F12</code>를 눌러 보자. 물론 전혀 맘에 들지 않는 디자인이라면, 미안하다.</p>

<hr />

<h3 id="관리자-페이지를-튜닝해-보자">관리자 페이지를 튜닝해 보자.</h3>

<p>장고는 빠른 웹페이지 빌터에 걸맞게 관리자 페이지를 기본적으로 제공한다. <code class="language-plaintext highlighter-rouge">_base/setting.py</code>의 <code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code>의 리스트 중 <code class="language-plaintext highlighter-rouge">django.contrib.admin</code>이 그것이다. 본인도 이 블로그의 관리자 페이지는 건드리지 않았지만, 이미 충분히 만족하기 때문이다.</p>

<p>하지만 만약 blog앱의 모델 중 Question의 필드가 관리자 페이지에서 보이는 방법을 변경하고 싶다면, 어떻게 해야 할까? <code class="language-plaintext highlighter-rouge">blog/admin.py</code>로 돌아가자.</p>

<p>현재는 단순히 Question 클래스를 가져와 등록만 해 놓은 상태이다. 관리자 페이지에서는 <code class="language-plaintext highlighter-rouge">Question text</code>, <code class="language-plaintext highlighter-rouge">Date Publushed</code> 순서로 보이는데, 이 순서를 바꾸어 보자.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">QuestionAdmin</span><span class="p">(</span><span class="n">admin</span><span class="p">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
<span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'pub_date'</span><span class="p">,</span> <span class="s">'question_text'</span><span class="p">]</span>

<span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">Question</span><span class="p">,</span> <span class="n">QuestionAdmin</span><span class="p">)</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">admin.ModelAdmin</code> 클래스를 상속받는 <code class="language-plaintext highlighter-rouge">QuestionAdmin</code> 클래스를 새로 생성하여, 필드의 순서를 재정의하고 이를 관리자 페이지에 등록했다. 지금 장고 개발 서버를 실행하여 직접 확인해 보자.</p>

<p>만약 필드가 아주 많고 이를 어떤 그룹화 시키고 싶다면, 직관적이게도 다음과 같이 <code class="language-plaintext highlighter-rouge">fieldsets</code>를 정의하면 된다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">QuestionAdmin</span><span class="p">(</span><span class="n">admin</span><span class="p">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
<span class="n">fieldsets</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="p">{</span><span class="s">'fields'</span><span class="p">:</span> <span class="p">[</span><span class="s">'question_text'</span><span class="p">]}),</span>
<span class="p">(</span><span class="s">'Date information'</span><span class="p">,</span> <span class="p">{</span><span class="s">'fields'</span><span class="p">:</span> <span class="p">[</span><span class="s">'pub_date'</span><span class="p">]}),</span>
<span class="p">]</span></code></pre></figure>

<p>fieldsets는 튜플의 리스트로 이루어져 있는데, 각 튜플의 첫 번째 인자는 각 set의 제목을 나타낸다. <code class="language-plaintext highlighter-rouge">None</code>는 그러니까 제목이 없는 set인 것이다.</p>

<p>이전의 과정에서 <code class="language-plaintext highlighter-rouge">admin.py</code>에 <code class="language-plaintext highlighter-rouge">Choice</code> 클래스를 추가하였을 것이다. 덕분에 관리자 페이지에서 개별의 Choice를 넣고 뺄 수 있다. 그러나 어쩌면, Question을 정의할 때 같이 Choice도 정의할 수 있다면 조금의 클릭질을 줄일 수 있을 것 같다. 바로 해보자. 일단 <code class="language-plaintext highlighter-rouge">admin.site.register(Choice)</code>를 지우고 시작한다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ChoiceInline</span><span class="p">(</span><span class="n">admin</span><span class="p">.</span><span class="n">StackedInline</span><span class="p">):</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Choice</span>
<span class="n">extra</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">class</span> <span class="nc">QuestionAdmin</span><span class="p">(</span><span class="n">admin</span><span class="p">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
<span class="n">fieldsets</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="p">{</span><span class="s">'fields'</span><span class="p">:</span> <span class="p">[</span><span class="s">'question_text'</span><span class="p">]}),</span>
<span class="p">(</span><span class="s">'Date information'</span><span class="p">,</span> <span class="p">{</span><span class="s">'fields'</span><span class="p">:</span> <span class="p">[</span><span class="s">'pub_date'</span><span class="p">],</span> <span class="s">'classes'</span><span class="p">:</span> <span class="p">[</span><span class="s">'collapse'</span><span class="p">]}),</span>
<span class="p">]</span>
<span class="n">inlines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ChoiceInline</span><span class="p">]</span></code></pre></figure>

<p>위의 내용을 <code class="language-plaintext highlighter-rouge">blog/admin.py</code>에 추가하면서, 이제 관리자 페이지의 Question에서 해당 Choice를 바로 편집할 수 있게 되었다. extra의 개수는 Choice가 없는 Question 에서도 추가할 수 있는 여분의 Choice 필드를 제공한다. 만약 이를 제거하면, 기본값인 3이 그대로 반영된다.</p>

<p>잘 작동은 하는 것 같다. 하지만 하나의 Choice가 너무 많은 공간을 차지하는 느낌이 든다. 다른 것으로 바꿔보자. <code class="language-plaintext highlighter-rouge">ChoiceInline</code>클래스가 상속받고 있는 <code class="language-plaintext highlighter-rouge">admin.StackedInline</code>클래스를 <code class="language-plaintext highlighter-rouge">admin.TabularInline</code>로 바꾸면 된다. 좀 더 조밀하고 보기 좋아졌다.</p>

<p>필드의 모양을 정의하는 다른 옵션들이 궁금하다. 쉘에서 <code class="language-plaintext highlighter-rouge">from django.contrib import admin</code>를 날려보니 위에서 사용한 세 가지 옵션, <code class="language-plaintext highlighter-rouge">ModelAdmin</code>, <code class="language-plaintext highlighter-rouge">StackedInline</code>, <code class="language-plaintext highlighter-rouge">TabularInline</code>은 모두 <code class="language-plaintext highlighter-rouge">django.contrib.admin.options</code> 하위에 있었다. 같은 종류의 클래스를 찾아보니 다음이 있었다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">BaseModelAdmin | &lt;class <span class="s1">'django.contrib.admin.options.BaseModelAdmin'</span><span class="o">&gt;</span>
IncorrectLookupParameters| &lt;class <span class="s1">'django.contrib.admin.options.IncorrectLookupParameters'</span><span class="o">&gt;</span>
InlineModelAdmin | &lt;class <span class="s1">'django.contrib.admin.options.InlineModelAdmin'</span><span class="o">&gt;</span>
ModelAdmin | &lt;class <span class="s1">'django.contrib.admin.options.ModelAdmin'</span><span class="o">&gt;</span>
StackedInline | &lt;class <span class="s1">'django.contrib.admin.options.StackedInline'</span><span class="o">&gt;</span>
TabularInline | &lt;class <span class="s1">'django.contrib.admin.options.TabularInline'</span><span class="o">&gt;</span></code></pre></figure>

<p>바로 찾은 것은 아니고 본인이 파이썬의 모듈을 탐색할 때 사용하는 자작 툴을 이용하여 sublime 3로 가공한 결과다. 그러나 위에서 사용한 세 가지 옵션 이외에는 admin의 네임스페이스에 없어 앞에서 사용한 방식으로는 사용할 수 없는 듯 싶다. <code class="language-plaintext highlighter-rouge">__bases__</code> 속성을 이용하여 어떤 클래스의 차일드인지 알아봤다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> admin.ModelAdmin.<span class="k">**</span>bases<span class="k">**</span>
<span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">(</span>&lt;class <span class="s1">'django.contrib.admin.options.BaseModelAdmin'</span><span class="o">&gt;</span>,<span class="o">)</span>
<span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> admin.StackedInline.<span class="k">**</span>bases<span class="k">**</span>
<span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">(</span>&lt;class <span class="s1">'django.contrib.admin.options.InlineModelAdmin'</span><span class="o">&gt;</span>,<span class="o">)</span>
<span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> admin.TabularInline.<span class="k">**</span>bases<span class="k">**</span>
<span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">(</span>&lt;class <span class="s1">'django.contrib.admin.options.InlineModelAdmin'</span><span class="o">&gt;</span>,<span class="o">)</span>
<span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> </code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">IncorrectLookupParamiters</code> 이외의 두 클래스는 부모 클래스였다. <code class="language-plaintext highlighter-rouge">help(options.IncorrectLookupParameters)</code>로 보니 이 클래스는 <code class="language-plaintext highlighter-rouge">builtins.Exceptin</code>클래스를 상속받고 있었다. 사용법에 대한 자세한 설명은 없었는데, 이름에서 추측컨대 찾으려는 필드가 DB에 없을 때 이를 예외처리하는 클래스인 모양이다.</p>

<p>Question을 관리하는 페이지는 이제 괜찮아 보인다. 그렇다면 질문 목록을 수정할 수 있을까? 해당 질문에서 표시되는 문자열은 모델을 기억할지는 모르겠지만 <code class="language-plaintext highlighter-rouge">str()</code>로 표현되는 것이다. 때문에 <code class="language-plaintext highlighter-rouge">question_text</code>이 그대로 보인다. 만약 모델에서 <code class="language-plaintext highlighter-rouge">str()</code>메서드를 주석처리 한다면, 질문 목록은 <code class="language-plaintext highlighter-rouge">Question object (2)</code>와 같은 형식으로만 표현될 것이다.</p>

<p>질문 목록을 테이블 형태로 표현해 보자. 다음처럼 수정하면 원하는 대로 보일 것이다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">QuestionAdmin</span><span class="p">(</span><span class="n">admin</span><span class="p">.</span><span class="n">ModelAdmin</span><span class="p">):</span> <span class="c1"># ...
</span>
    <span class="n">list_display</span> <span class="o">=</span> <span class="p">(</span><span class="s">'question_text'</span><span class="p">,</span> <span class="s">'pub_date'</span><span class="p">,</span> <span class="s">'was_published_recently'</span><span class="p">)</span></code></pre></figure>

<p>명료하다. 관리자 페이지에서 위 순서대로 정확히 표현된다.</p>

<p>임의의 메서드인 <code class="language-plaintext highlighter-rouge">was_published_recently()</code>를 제외하고, 열의 머리글을 클릭하면 해당 필드의 종류에 맞춰 알맞게 정렬된다. 임의의 메서드는 아래와 같은 속성을 추가하여 좀 더 낫게 보이게 하자.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Question</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span> <span class="c1"># ...
</span>
    <span class="k">def</span> <span class="nf">was_published_recently</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">now</span> <span class="o">-</span> <span class="n">datetime</span><span class="p">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">pub_date</span> <span class="o">&lt;=</span> <span class="n">now</span>
    <span class="n">was_published_recently</span><span class="p">.</span><span class="n">admin_order_field</span> <span class="o">=</span> <span class="s">'pub_date'</span>
    <span class="n">was_published_recently</span><span class="p">.</span><span class="n">boolean</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">was_published_recently</span><span class="p">.</span><span class="n">short_description</span> <span class="o">=</span> <span class="s">'Published recently?'</span></code></pre></figure>

<p>이제 <code class="language-plaintext highlighter-rouge">was_published_recently()</code> 메서드는 pub_date에 맞춰 정렬되고, 열의 머리글 텍스트가 바뀌었다. 또한 단순히 True 또는 False만 표시되던 이전의 리스트에서 좀 더 쉽게 식별 가능한 형태로 바뀌었다.</p>

<p>다음은 적용 가능한 다양한 다른 메서드이다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># 필터 목록이 표시되는데, QuestionAdmin 클래스에 추가하면 관리자 페이지에 해당 필드에 알맞는 필터 조건이 뜬다.
</span>
    <span class="n">list_filter</span> <span class="o">=</span> <span class="p">[</span><span class="s">'pub_date'</span><span class="p">]</span>

<span class="c1"># 관리자 페이지의 질문 목록에 검색창이 추가된다. 참조할 문자열 필드를 지정하면 된다.
</span>
    <span class="n">search_fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'question_text'</span><span class="p">]</span></code></pre></figure>

<p>참고할 점은, 검색 기능은 내부적으로 <code class="language-plaintext highlighter-rouge">LIKE</code>쿼리를 사용한다.</p>

<hr />

<h3 id="관리자-페이지의-탬플릿을-수정해-보자">관리자 페이지의 탬플릿을 수정해 보자.</h3>

<p>지금까지 각각의 앱에 속한 템플릿을 수정해 봤다. 그러나 admin은 앱 폴더가 없다. 이런 경우, 그냥 프로젝트의 최상위 경로에 templates 폴더를 만들어 이를 <code class="language-plaintext highlighter-rouge">_base/setting.py</code> 에서 명시하면 된다. 아래와 같이 <code class="language-plaintext highlighter-rouge">'DIRS': [os.path.join(BASE_DIR, 'templates')],</code> 한 줄을 추가하자.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">{</span>
<span class="s">'BACKEND'</span><span class="p">:</span> <span class="s">'django.template.backends.django.DjangoTemplates'</span><span class="p">,</span>
<span class="s">'DIRS'</span><span class="p">:</span> <span class="p">[</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'templates'</span><span class="p">)],</span>
<span class="s">'APP_DIRS'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
<span class="s">'OPTIONS'</span><span class="p">:</span> <span class="p">{</span>
<span class="p">(...)</span>
<span class="p">},</span>
<span class="p">},</span>
<span class="p">]</span></code></pre></figure>

<p>지금, 기존에 있던 <code class="language-plaintext highlighter-rouge">admin</code>앱의 탬플릿을 재정의하는 것이다. <code class="language-plaintext highlighter-rouge">templates/admin</code> 경로에 장고의 admin앱의 템플릿 코드를 복사하자. 어디있는지 모르겠다면 터미널에서 다음의 명령이 도움을 줄 것이다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="se">\$</span> python <span class="nt">-c</span> <span class="s2">"import django; print(django.**path**)"</span></code></pre></figure>

<p>물론, 가상환경을 사용하고 있다면 <code class="language-plaintext highlighter-rouge">workon</code>으로 먼저 파이썬 가상환경을 활성화시키자. 다음과 같은 형태면 잘 된 것이다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="se">\$</span> <span class="nb">ls</span> <span class="nt">-alhF</span>
total 116K
drwxrwxr-x 6 rockheung rockheung 4.0K Mar 14 22:13 ./
drwxrwxr-x 3 rockheung rockheung 4.0K Mar 14 22:13 ../
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 268 Mar 2 17:53 404.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 527 Mar 2 17:53 500.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 1012 Mar 2 17:53 actions.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 385 Mar 2 17:53 app_index.html
drwxrwxr-x 3 rockheung rockheung 4.0K Mar 2 17:53 auth/
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 3.6K Mar 2 17:53 base.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 316 Mar 2 17:53 base_site.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 3.3K Mar 2 17:53 change_form.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 3.2K Mar 2 17:53 change_list.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 1.6K Mar 2 17:53 change_list_results.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 372 Mar 2 17:53 date_hierarchy.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 2.4K Mar 2 17:53 delete_confirmation.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 2.3K Mar 2 17:53 delete_selected_confirmation.html
drwxrwxr-x 2 rockheung rockheung 4.0K Mar 2 17:53 edit_inline/
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 330 Mar 2 17:53 filter.html
drwxrwxr-x 2 rockheung rockheung 4.0K Mar 2 17:53 includes/
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 3.0K Mar 2 17:53 index.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 437 Mar 2 17:53 invalid_setup.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 1.9K Mar 2 17:53 login.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 1.5K Mar 2 17:53 object_history.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 554 Mar 2 17:53 pagination.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 358 Mar 2 17:53 popup_response.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 245 Mar 2 17:53 prepopulated_fields_js.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 1.4K Mar 2 17:53 related_widget_wrapper.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 1.1K Mar 2 17:53 search_form.html
<span class="nt">-rw-rw-r--</span> 1 rockheung rockheung 790 Mar 2 17:53 submit_line.html
drwxrwxr-x 2 rockheung rockheung 4.0K Mar 2 17:53 widgets/</code></pre></figure>

<p>이제 <code class="language-plaintext highlighter-rouge">base_site.html</code>파일을 수정하여 관리자 페이지 제목을 수정해 보자. <code class="language-plaintext highlighter-rouge">{{site_header|default:_ ('Django administration' }}</code>를 제목으로 사용하고 싶은 문자열로 수정한다. 깔끔하게 관리자 페이지의 제목이 바뀜을 확인할 수 있다. 이런 식으로 관리자 페이지의 어떤 부분이든 다시 정의할 수 있다. 장고는 <code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code>의 앱을 정의된 순서대로 보여준다. 원한다면, admin앱의 첫 화면인 <code class="language-plaintext highlighter-rouge">index.html</code>을 수정해볼 수도 있을 것이다.</p>
:ET