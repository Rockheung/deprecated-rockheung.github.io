---
layout: post
title: '정규표현식'
date: 2018-03-20 12:49:49.119 +0900
categories: Study
tags: regular-expressions
---

### [Source: zvon.org/comp/r/tut-Regexp.html](http://zvon.org/comp/r/tut-Regexp.html#Pages~Contents)

다방면에서 두루두루 사용되는 정규표현식을 간략하게 정리해 보면,

> 1. 대소문자 구분한다.
> 2. white space 문자를 포함한다 - 스페이스, 탭, 엔터
> 3. `^` - 맨앞, `$`- 맨끝. 그러니까 `^$`는 처음부터 끝까지. 전부.
> 4. 만약 `^`, `$`와 같은 특별한 문자를 그대로 표현하고 싶으면, `\`를 앞에 붙이자. `\`를 표현하고 싶다면? 두 개 쓰면 된다. `\\`
> 5. `.`, 그러니까 점은, 어느 문자에나 매칭된다. 점이 여러 개 있다면,
> 6. `[]`는 이 안의 문자와 같은 문자를 지칭한다. 그러니까 `[sdf]`면, `s` | `d` | `f` 인 한 글자를 의미한다.
> 7. `[ - ]`는 문자의 범위를 나타낸다. 여러 개의 범위는 `[C-Ka-d2-6]`와 같이 표현한다. 이 식은 세 가지의 범위를 표현한다.
> 8. `[]`안에서 `^`는 not의 의미다. `[^sgS]`는 그러니까 `s` | `g` | `S`가 제외된 모든 문자란 표현이다.
> 9. `(|)`는 문자열 덩어리를 표현한다. `(snd|s12)`는 `snd` | `s12` 가 덩어리로 포함된 표현이다.
> 10. `*`는 없거나 연속, `+`는 하나 이상 연속, `?`는 없거나 하나만.
> 11. 10번에 대한 `?`의 예시 - `[^@]@?@`: `@`가 아닌 문자 하나와, `@`인 문자 사이에, `@`가 없거나 하나 있는 표현이다.
> 12. `{n}`는 바로 앞의 문자 한 글자가 정확히 n번 반복인 경우를 표현한다.
> 13. `{m,n}`는 m번 이상, n번 이하의 반복이다.
> 14. 같은 의미를 가지는 표현들: `*` ~ `{0,}`, `+` ~ `{1,}`, `?` ~ `{0,1}`
> 15. 기본적으로, 표현들은 가능한 가장 많은 매칭을 한다. 하지만 `?`가 붙으면, 가장 최소한의 매칭만 찾도록 바뀐다. `r.*?`는 그러니까, `r` 한 글자와만 매칭된다.
> 16. `\w`는 알파벳 대소문자, 숫자, 그리고 언더바 `_`를 표현한다. 몇몇 언어에서는 문자 약어들은 인식되지 않는다. 그런 경우 그냥 `[A-z0-9_]`를 사용한다.
> 17. `\W`는 알파벳 대소문자, 숫자, 그리고 언더바만 빼고 모두 포현한다. 그러니까 `[^A-z0-9_]`이다.
> 18. `\s`는 white space 문자들을 표현한다 - 스페이스, 엔터, 탭. 반대로 `\S`는 그 밖의 모든 문자를 표현한다.
> 19. `\d`는 모든 숫자를 표현하고, `\D`는 그 반대이다. 숫자가 아닌 모든 문자를 표현한다. 시스템에서 지원 안하면, `[0-9]`쓰면 된다.
> 20. `\b`는, 한 문자가 아니라, `\w`와 `\W` 사이를 표현한다.
> 21. `\B`는, 그렇다면 당연하게도, `\b`가 아닌 간격이다.
> 22. `\A`와 `\Z`는 각각 문자열의 처음과 마지막을 가리킨다. 이는 `^`, `$`와 비슷하나, 이와는 다르게 매 새로운 라인마다 적용되지 않는다. 그냥 문자열의 생 처음 혹은 생 마지막만 가리킨다.
> 23. `(?=<pattern>)`는 해당 패턴이 있으면 그 앞을 가리키지만, 해당 패턴 자체를 표현하지는 않는다. 소비되지 않는다.
> 24. `(?!<pattern>)`는 해당 패턴이 있으면 그 앞을 가리키고, 그리고 그 앞을 표현에서 제외시킨다. 역시 소비되지 않는다.

여기서부터는 앞의 정규표현 튜토리얼에 없다.

> 25. 24번은 전방 탐색으로 불린다.
> 26. `(?<=<pattern>)`는 위와는 방향이 반대라고 이해하면 된다. 해당 패턴이 있으면 그 뒤를 가리키고, 자체는 소비하지 않는다. 예시는 다음과 같다

    >>> import re

    >>> txt = 'ABC01: $23.45\n\
        HGG42: $5.31\n\
        CFMX1: $899.00\n\
        XTC99: $69.96'

    >>> print(txt)
    ABC01: $23.45
    HGG42: $5.31
    CFMX1: $899.00
    XTC99: $69.96

    >>> re.findall('(?<=\$)[0-9.]+', txt)
    ['23.45', '5.31', '899.00', '69.96']

보면 `(?<=\$)[0-9.]+`라는 표현은 `$`문자 패턴의 뒤를 보면서, 해당 패턴을 소비하진 않고, 숫자와 `.`을 포함한 문자가 하나 이상 반복되는 문자를 표현하고 있다.

> 27. `(?<!<pattern>)`은 26과는 반대로, 특정 패턴의 뒤를 보되 찾은 문자열을 표현에서 제외시킨다는 의미이다.
