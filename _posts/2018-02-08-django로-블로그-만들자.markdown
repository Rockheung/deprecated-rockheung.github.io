---
    layout: post
    title:  "Django로 블로그 만들자"
    date:   2018-02-08 17:50:04.421 -0600
    categories: [ 일상 ]
    tags: [  ]
---

{% raw %}
도메인을 산 지는 몇년 되었는데, 기껏해야 XPEnology같은 파일 서버나 Plex 같은 영상 스트리밍 서버용으로 썼던 게 전부였다. 아니면 VPS에 ssh 편하게 때리려고 주소 할당용으로 쓰거나. 직접 전전긍긍하면서 사이트를 만들어보자 싶어서 이번에 파이썬 기반의 웹프레임워크라는 장고를 만지작 하기 시작했다.
 <!-- more -->
장고로 블로그 만들기, 장고로 블로그를 만들어 보자, 기타등등 튜토리얼을 찾다가 [장고걸즈](https://tutorial.djangogirls.org/ko/)를 발견하고 한땀한땀 따라해 보았다. 그러나 여느 튜토리얼이 그렇듯, 자세한 설명이 부족했다. 이렇게 따라 쳐보세요, 이게 어려운데 이렇게 치면 돼요. 뿅! 완성!

어느덧 튜토리얼의 막바지에 다다른 내 눈앞의 블로그는 보잘것 없었다. 그럴거면 그냥 PHP 1도 몰라도 되는 워드프레스 설치하고 말지. 적당한 패키지가 어디 분명히 있을 터였다. 패키지가 으레 그렇듯 맘에 안 들 테고, 뜯고 씹고 맛보고 하면 대충 그림을 알지 않을까 하는 마음에 찾은 것이 [zinnia](https://github.com/Fantomas42/django-blog-zinnia) 였다. 그냥 pip으로 깔고, 장고 프로젝트 하나 만들어서 setting.py랑 url.py만 수정하니 그럴싸한 기능들 종합 세트 블로그가 모습을 드러냈다. 아니, 난 이렇게 뭔지도 모르겠는 pingback 같은 기능까지 골고루 들어있는 녀석을 원한건 아니었다. 더구나 디자인도 구렸다. [데모가 궁금하다면 여기](https://demo.django-blog-zinnia.com/blog/). 관련 [문서](http://docs.django-blog-zinnia.com/en/stable/)를 읽어보니 몇 가지 테마를 적용시킬 수 있었는데, 개중에 그나마 다뤄본 적 있는 Bootstrap 3 기반 테마를 골랐다. 적용시키니 정말 정석적인 디자인이었다. 기존 zinnia의 Django 템플릿 위에 오버라이딩하는 형태로 동작하는 듯 싶었다. 

그렇게 블로그가 '기능적으로' 작동하는 걸 보고 나서 열흘 동안 열심히 껍데기를 한땀한땀 만들어서 적용시킨 게 지금 이 모습이다. [여기](https://github.com/Rockheung/zinnia-theme-bootstrap/tree/master)에서 git clone만 하고 심볼릭 링크를 파이썬 site-package에 갖다놓으면 제목과 같은 일이 가능하다(본인의 한땀한땀 git push한 것들을 바로 쓸 수 있는 것이다). 다만 [zinnia 문서](http://docs.django-blog-zinnia.com/en/develop/getting-started/install.html)를 보고 필요한 설치라던가 하는 건 당장은 본인의 몫이다. 없는 기능 만드는 것 보다 있지만 안쓸 기능 템플릿에서 주석처리하는게 편하고 구조파악하기도 수월했다. 부트스트랩 예제를 찾아보다가 왼쪽에서 튀어나오는 사이드바와 마우스를 갖다가 대면 좌악 튀어나오는 검색바에 꽂혀서 거의 대부분의 시간을 CSS 튜닝하면서 보낸 듯 싶지만 뭐 어떤가. 디자인 비전공자로서 이 정도면 만족한다. 아, 그리고 기존에 있던 댓글 기능을 빼버리고 disqus를 이식하는데도 상당한 삽질을 했다. 특히 사이드바의 최근 댓글 부분이 disqus로 연동되어 있다. 여길 만지다가 마침내 css 구문에 감이 오기 시작했다. 

다만 완성될 즈음에, 이 블로그의 디자인 모티브를 제공했던 [어느 분의 블로그](http://blog.hannal.com)가 사실은 [깃허브 페이지](https://pages.github.com/)로 구현된 것이라는걸 깨닫게 되었는데, 그래서 시무룩해졌다. 어쨌든, 스스로의 삽질 정리도 할 겸 지난 열흘간의 여정을 적을 생각이다. 

그리고 혹시 가능하다면 현재 깃허브 페이지를 만드는 데에 가장 대중적으로 사용되는 [jekyll](https://jekyllrb-ko.github.io/) 구동 방식을 알아보고, ELM 기반 정적 블로그도 비슷하게 가능하지 않을까 생각하고 있다.
{% endraw %}
    