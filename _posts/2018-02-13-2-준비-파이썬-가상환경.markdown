---
layout: post
title:  "2. 준비 - 파이썬 가상환경"
date:   2018-02-13 11:38:16.669 +0900
categories: [ django ]
tags: [ 파이썬, Python, virtualenv, virtualenvwrapper, pip, pip2, pip3 ]
---

이 글에서는 VPS에서 파이썬 가상환경을 만드는 `virtualenvwrapper` 를 설치하여 Django를 실행시킬 가상환경을 구성하기 위한 준비를 한다. `virtualenv`를 사용할 때와는 다르게 `virtualenvwrapper`는 현재의 path에 상관없이 `workon $(가상환경 이름)`으로 해당 가상환경을 활성화할 수 있다. 마치 폴더를 만드는 것 처럼 쉽게 가상환경을 만들고, 지울 수 있다.

<!--more-->

파이썬을 사용하다가 필연적으로 맞닥뜨리는 명령어가 바로 "[pip](https://ko.wikipedia.org/wiki/Pip_(%ED%8C%A8%ED%82%A4%EC%A7%80_%EA%B4%80%EB%A6%AC%EC%9E%90))"이다. 대개 다음과 같이 쓴다.

    pip install $(파이썬 패키지 이름 in PyPI)

*[PyPI](https://pypi.python.org/pypi)*

파이썬 2.7.9 이후 버전과 3.4 이후 버전은 기본적으로 포함하고 있다고 하나, 가급적이면 최신 pip 패키지를 이용하는 편이 좋다. 최신 버전이 아닐 경우, pip을 실행 시에 업그레이드를 권하는 멘트가 뜬다. [여기 get-pip.py](https://bootstrap.pypa.io/get-pip.py)를 눌러 가장 최신 버전의 pip을 설치하는 파이썬 스크립트를 다운 받을 수 있다. 본인은 이 방식을 선호하나,  다른 방식을 찾는다면 [여기](https://pip.pypa.io/en/stable/installing/#)에서 공식 문서를 참조할 수 있다.

Root 권한으로 다음을 실행시키면 최신 버전의 pip을 설치할 수 있다. 

    # python get-pip.py

조금 주의할 부분이 있다면, Ubuntu의 기본 설정은 python : python 2 버전이라는 것이다. 그러니까 위와 같은 커맨드를 날리면 이후 pip으로 설치하는 모든 패키지는 오직 파이썬 2에 해당하는 패키지가 설치될 것이다. 그렇다고 다음과 같이 실행시킨다면

    # python3 get-pip.py

이후 모든 `pip install $(패키지명)` 은 python 3을 위한 패키지만을 설치할 것이다. 자신의 현재 pip 이 어느 버전대의 파이썬 패키지를 설치하고 있는지 알고 싶다면, 

    $ pip -V
    pip 9.0.1 from /usr/local/lib/python2.7/dist-packages (python 2.7)

터미널에서 위와 같은 옵션으로 확인할 수 있다. `pip --help` 커맨드로 다양한 다른 옵션을 확인할 수 있다.
한가지 팁이 있다면, 파이썬 2용 패키지를 설치하는 pip2 와 같은 커맨드도 있다. 이 커맨드는 파이썬 2 용 패키지를 설치하도록 강제한다.

*파이썬 2가 파이썬 3의 하위호환이라고 생각하면 절대 안 된다.*

비슷하나 서로 독립된 다른 언어라고 생각하는 편이 좋을 것이다. pip으로 2버전대의 패키지를 설치했다고 파이썬 3에서 사용할 수 있는 것은 아니다. 실제로 설치되는 위치가 분리되어 있다. 다음 커맨드로 설치된 파이썬 패키지를 확인할 수 있다.

    $ pip list

정리하면, 만약 다음과 같이 차례로 입력했다고 하자.

    $ pip -V
    pip 9.0.1 from /usr/local/lib/python3.5/dist-packages (python 3.5)
    $
    $
    $ pip list
    boto (2.38.0)
    chardet (2.3.0)
    cryptography (1.2.3)
    duplicity (0.7.6)
    enum34 (1.1.2)
    idna (2.0)
    ipaddress (1.0.16)
    lockfile (0.12.2)
    ndg-httpsclient (0.4.0)
    pbr (3.1.1)
    pip (9.0.1)
    ...
    stevedore (1.28.0)
    urllib3 (1.13.1)
    wheel (0.30.0)

현재 pip 으로 파이썬 3 용 패키지를 설치할 수 있으며, 파이썬 3용 패키지 중 설치된 목록을 확인한 것이다. 이 상황에서 파이썬 2 용으로 설치된 패키지를 확인하고 싶으면 다음과 같이 입력하자.

    $ pip2 list

이 모든 골때리는 상황을 위와 같은 설명 없이 겪게 된다면, 분명히 설치했는데 import가 되지 않는 상황을 맞닥뜨리게 된다. 이 모든 것의 이유는 바로 아까도 언급했듯이, 파이썬 3가 파이썬 2와 호환되지 않기 때문이다.

그리고 이런 상황을 좀 더 깔끔하고 명확하게 다루기 위해 등장한 것이 파이썬 가상환경이다.

몇 가지 방법([virtualenv](https://virtualenv.pypa.io/en/stable/), [pyenv](https://github.com/pyenv/pyenv), etc)이 있는 것으로 알지만 본인은 [virtualenvwrapper](http://virtualenvwrapper.readthedocs.io/en/stable/)를 사용하는 것을 선호한다. virtualenv 의 상위호한 격으로 생각하면 된다.

    # pip install virtualenvwrapper

설치를 하고, 홈 폴더의 Shell startup 파일을 수정하는 과정이 필요하다. 일반적으로 *.bashrc*나 *.profile*를 수정한다. 파일의 맨 마지막에 다음 내용을 추가한다. 편집기는 편할 대로 사용한다. 터미널에서 파일을 수정할 때는 대개 `vi`나 `nano`를 사용한다. 편집을 할 수만 있으면 어느 편집기를 사용하든 상관없다. 기본 가정이 ssh로 VPS에 접속하는 것이라서 터미널에서 수정하는 경우를 예로 들었다.

    export WORKON_HOME=$HOME/.virtualenvs
    export PROJECT_HOME=$HOME/Devel
    source /usr/local/bin/virtualenvwrapper.sh

만약 편집기를 사용하는 데에 약간의 어려움이 있거나 귀찮다면 다음과 같이 터미널에서 해결하는 방법도 있다. 수정하고자 하는 파일(.bashrc)의 제일 마지막에 위의 내용을 추가하는 명령어이다. `echo '`까지만 입력하고 엔터를 누르면 쉘 프롬포트가 $ 에서 > 로 바뀌는데, 이때 위의 내용을 복붙하고 `' >> ~/.bashrc`를 입력하면 된다. 아마도 다음과 같이 보일 것이다.

    $ echo '
    > export WORKON_HOME=$HOME/.virtualenvs
    > export PROJECT_HOME=$HOME/Devel
    > source /usr/local/bin/virtualenvwrapper.sh' >> ~/.bashrc

잘 추가되었는지 확인하려면 다음 명령어를 날려주자

    $ cat ~/.bashrc

출력되는 내용이 방대할 텐데, 그렇다면 마지막 10줄만 확인하는 다음의 명령어도 괜찮다.

    $ tail ~/.bashrc

제대로 잘 입력이 되었다 생각되면, 다음 명령어로 적용시키자

    $ . ~/.bashrc

다음의 명령어와 같은 의미다.

    $ source ~/.bashrc

이 둘의 차이가 궁금하다면 [여기](https://askubuntu.com/questions/25488/what-is-the-difference-between-source-and)에서 해답을 얻을 수 있을 것이다.

어쨌든, 위의 과정까지 따라왔다면, 이제 한 줄만 남았다.

    $ mkvirtualenv $(가상환경을 지칭할 이름: ex) myenv)
    New python executable in /home/rockheung/.virtualenvs/text/bin/python
    Installing setuptools, pip, wheel...done.
    virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/predeactivate
    virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/postdeactivate
    virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/preactivate
    virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/postactivate
    virtualenvwrapper.user_scripts creating /home/rockheung/.virtualenvs/myenv/bin/get_env_details
    (myenv) $
    (myenv) $

위와 같이 방금 이름붙인 myenv가 shell에 보이면 성공이다.

빠져나가고 싶으면 다음을 입력하자

    $ deactivate

만약 이 가상환경을 지우고 싶으면 위의 출력 내용에도 보이듯이 *$HOME/.virtualenvs*폴더에 있는 해당 이름의 폴더를 지우면 된다.

    $ rm -rf ~/.virtualenvs/myenv

물론 직관적이게도 `rmvirtualenv`를 사용하는 것을 권장한다.

    $ rmvirtualenv myenv

가상환경에서 특정 파이썬 버전을 지칭하고 싶다면 `-p` 매개변수를 붙여 다음과 같이 입력하자.

    $ mkvirtualenv myenv3 -p python3

해당 가상환경이 활성화된 상태에서는 python3 버전이 기본 python이 된다.
